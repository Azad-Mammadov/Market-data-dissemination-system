// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: marketdata.proto
// Protobuf C++ Version: 5.29.3

#ifndef marketdata_2eproto_2epb_2eh
#define marketdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_marketdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_marketdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_marketdata_2eproto;
namespace marketdata {
class IncrementalUpdate;
struct IncrementalUpdateDefaultTypeInternal;
extern IncrementalUpdateDefaultTypeInternal _IncrementalUpdate_default_instance_;
class MarketDataMessage;
struct MarketDataMessageDefaultTypeInternal;
extern MarketDataMessageDefaultTypeInternal _MarketDataMessage_default_instance_;
class Snapshot;
struct SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class SubscriptionRequest;
struct SubscriptionRequestDefaultTypeInternal;
extern SubscriptionRequestDefaultTypeInternal _SubscriptionRequest_default_instance_;
}  // namespace marketdata
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace marketdata {

// ===================================================================


// -------------------------------------------------------------------

class SubscriptionRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:marketdata.SubscriptionRequest) */ {
 public:
  inline SubscriptionRequest() : SubscriptionRequest(nullptr) {}
  ~SubscriptionRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscriptionRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscriptionRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscriptionRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscriptionRequest(const SubscriptionRequest& from) : SubscriptionRequest(nullptr, from) {}
  inline SubscriptionRequest(SubscriptionRequest&& from) noexcept
      : SubscriptionRequest(nullptr, std::move(from)) {}
  inline SubscriptionRequest& operator=(const SubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionRequest& operator=(SubscriptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscriptionRequest*>(
        &_SubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SubscriptionRequest& a, SubscriptionRequest& b) { a.Swap(&b); }
  inline void Swap(SubscriptionRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscriptionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscriptionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscriptionRequest& from) { SubscriptionRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscriptionRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "marketdata.SubscriptionRequest"; }

 protected:
  explicit SubscriptionRequest(::google::protobuf::Arena* arena);
  SubscriptionRequest(::google::protobuf::Arena* arena, const SubscriptionRequest& from);
  SubscriptionRequest(::google::protobuf::Arena* arena, SubscriptionRequest&& from) noexcept
      : SubscriptionRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentIdFieldNumber = 1,
  };
  // int32 instrument_id = 1;
  void clear_instrument_id() ;
  ::int32_t instrument_id() const;
  void set_instrument_id(::int32_t value);

  private:
  ::int32_t _internal_instrument_id() const;
  void _internal_set_instrument_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:marketdata.SubscriptionRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscriptionRequest& from_msg);
    ::int32_t instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class Snapshot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:marketdata.Snapshot) */ {
 public:
  inline Snapshot() : Snapshot(nullptr) {}
  ~Snapshot() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Snapshot* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Snapshot));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Snapshot(
      ::google::protobuf::internal::ConstantInitialized);

  inline Snapshot(const Snapshot& from) : Snapshot(nullptr, from) {}
  inline Snapshot(Snapshot&& from) noexcept
      : Snapshot(nullptr, std::move(from)) {}
  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
        &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Snapshot& a, Snapshot& b) { a.Swap(&b); }
  inline void Swap(Snapshot* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snapshot* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Snapshot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Snapshot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Snapshot& from) { Snapshot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Snapshot* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "marketdata.Snapshot"; }

 protected:
  explicit Snapshot(::google::protobuf::Arena* arena);
  Snapshot(::google::protobuf::Arena* arena, const Snapshot& from);
  Snapshot(::google::protobuf::Arena* arena, Snapshot&& from) noexcept
      : Snapshot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBidsFieldNumber = 2,
    kAsksFieldNumber = 3,
    kInstrumentIdFieldNumber = 1,
  };
  // repeated double bids = 2;
  int bids_size() const;
  private:
  int _internal_bids_size() const;

  public:
  void clear_bids() ;
  double bids(int index) const;
  void set_bids(int index, double value);
  void add_bids(double value);
  const ::google::protobuf::RepeatedField<double>& bids() const;
  ::google::protobuf::RepeatedField<double>* mutable_bids();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_bids() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_bids();

  public:
  // repeated double asks = 3;
  int asks_size() const;
  private:
  int _internal_asks_size() const;

  public:
  void clear_asks() ;
  double asks(int index) const;
  void set_asks(int index, double value);
  void add_asks(double value);
  const ::google::protobuf::RepeatedField<double>& asks() const;
  ::google::protobuf::RepeatedField<double>* mutable_asks();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_asks() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_asks();

  public:
  // int32 instrument_id = 1;
  void clear_instrument_id() ;
  ::int32_t instrument_id() const;
  void set_instrument_id(::int32_t value);

  private:
  ::int32_t _internal_instrument_id() const;
  void _internal_set_instrument_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:marketdata.Snapshot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Snapshot& from_msg);
    ::google::protobuf::RepeatedField<double> bids_;
    ::google::protobuf::RepeatedField<double> asks_;
    ::int32_t instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class IncrementalUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:marketdata.IncrementalUpdate) */ {
 public:
  inline IncrementalUpdate() : IncrementalUpdate(nullptr) {}
  ~IncrementalUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IncrementalUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IncrementalUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IncrementalUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline IncrementalUpdate(const IncrementalUpdate& from) : IncrementalUpdate(nullptr, from) {}
  inline IncrementalUpdate(IncrementalUpdate&& from) noexcept
      : IncrementalUpdate(nullptr, std::move(from)) {}
  inline IncrementalUpdate& operator=(const IncrementalUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementalUpdate& operator=(IncrementalUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncrementalUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncrementalUpdate* internal_default_instance() {
    return reinterpret_cast<const IncrementalUpdate*>(
        &_IncrementalUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(IncrementalUpdate& a, IncrementalUpdate& b) { a.Swap(&b); }
  inline void Swap(IncrementalUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncrementalUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncrementalUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IncrementalUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IncrementalUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IncrementalUpdate& from) { IncrementalUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IncrementalUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "marketdata.IncrementalUpdate"; }

 protected:
  explicit IncrementalUpdate(::google::protobuf::Arena* arena);
  IncrementalUpdate(::google::protobuf::Arena* arena, const IncrementalUpdate& from);
  IncrementalUpdate(::google::protobuf::Arena* arena, IncrementalUpdate&& from) noexcept
      : IncrementalUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBidChangesFieldNumber = 2,
    kAskChangesFieldNumber = 3,
    kInstrumentIdFieldNumber = 1,
  };
  // repeated double bid_changes = 2;
  int bid_changes_size() const;
  private:
  int _internal_bid_changes_size() const;

  public:
  void clear_bid_changes() ;
  double bid_changes(int index) const;
  void set_bid_changes(int index, double value);
  void add_bid_changes(double value);
  const ::google::protobuf::RepeatedField<double>& bid_changes() const;
  ::google::protobuf::RepeatedField<double>* mutable_bid_changes();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_bid_changes() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_bid_changes();

  public:
  // repeated double ask_changes = 3;
  int ask_changes_size() const;
  private:
  int _internal_ask_changes_size() const;

  public:
  void clear_ask_changes() ;
  double ask_changes(int index) const;
  void set_ask_changes(int index, double value);
  void add_ask_changes(double value);
  const ::google::protobuf::RepeatedField<double>& ask_changes() const;
  ::google::protobuf::RepeatedField<double>* mutable_ask_changes();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_ask_changes() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_ask_changes();

  public:
  // int32 instrument_id = 1;
  void clear_instrument_id() ;
  ::int32_t instrument_id() const;
  void set_instrument_id(::int32_t value);

  private:
  ::int32_t _internal_instrument_id() const;
  void _internal_set_instrument_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:marketdata.IncrementalUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IncrementalUpdate& from_msg);
    ::google::protobuf::RepeatedField<double> bid_changes_;
    ::google::protobuf::RepeatedField<double> ask_changes_;
    ::int32_t instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class MarketDataMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:marketdata.MarketDataMessage) */ {
 public:
  inline MarketDataMessage() : MarketDataMessage(nullptr) {}
  ~MarketDataMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MarketDataMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MarketDataMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketDataMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline MarketDataMessage(const MarketDataMessage& from) : MarketDataMessage(nullptr, from) {}
  inline MarketDataMessage(MarketDataMessage&& from) noexcept
      : MarketDataMessage(nullptr, std::move(from)) {}
  inline MarketDataMessage& operator=(const MarketDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataMessage& operator=(MarketDataMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDataMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kSnapshot = 1,
    kUpdate = 2,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const MarketDataMessage* internal_default_instance() {
    return reinterpret_cast<const MarketDataMessage*>(
        &_MarketDataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MarketDataMessage& a, MarketDataMessage& b) { a.Swap(&b); }
  inline void Swap(MarketDataMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDataMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MarketDataMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketDataMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MarketDataMessage& from) { MarketDataMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MarketDataMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "marketdata.MarketDataMessage"; }

 protected:
  explicit MarketDataMessage(::google::protobuf::Arena* arena);
  MarketDataMessage(::google::protobuf::Arena* arena, const MarketDataMessage& from);
  MarketDataMessage(::google::protobuf::Arena* arena, MarketDataMessage&& from) noexcept
      : MarketDataMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSnapshotFieldNumber = 1,
    kUpdateFieldNumber = 2,
  };
  // .marketdata.Snapshot snapshot = 1;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;

  public:
  void clear_snapshot() ;
  const ::marketdata::Snapshot& snapshot() const;
  PROTOBUF_NODISCARD ::marketdata::Snapshot* release_snapshot();
  ::marketdata::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::marketdata::Snapshot* value);
  void unsafe_arena_set_allocated_snapshot(::marketdata::Snapshot* value);
  ::marketdata::Snapshot* unsafe_arena_release_snapshot();

  private:
  const ::marketdata::Snapshot& _internal_snapshot() const;
  ::marketdata::Snapshot* _internal_mutable_snapshot();

  public:
  // .marketdata.IncrementalUpdate update = 2;
  bool has_update() const;
  private:
  bool _internal_has_update() const;

  public:
  void clear_update() ;
  const ::marketdata::IncrementalUpdate& update() const;
  PROTOBUF_NODISCARD ::marketdata::IncrementalUpdate* release_update();
  ::marketdata::IncrementalUpdate* mutable_update();
  void set_allocated_update(::marketdata::IncrementalUpdate* value);
  void unsafe_arena_set_allocated_update(::marketdata::IncrementalUpdate* value);
  ::marketdata::IncrementalUpdate* unsafe_arena_release_update();

  private:
  const ::marketdata::IncrementalUpdate& _internal_update() const;
  ::marketdata::IncrementalUpdate* _internal_mutable_update();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:marketdata.MarketDataMessage)
 private:
  class _Internal;
  void set_has_snapshot();
  void set_has_update();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MarketDataMessage& from_msg);
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::marketdata::Snapshot* snapshot_;
      ::marketdata::IncrementalUpdate* update_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SubscriptionRequest

// int32 instrument_id = 1;
inline void SubscriptionRequest::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_ = 0;
}
inline ::int32_t SubscriptionRequest::instrument_id() const {
  // @@protoc_insertion_point(field_get:marketdata.SubscriptionRequest.instrument_id)
  return _internal_instrument_id();
}
inline void SubscriptionRequest::set_instrument_id(::int32_t value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:marketdata.SubscriptionRequest.instrument_id)
}
inline ::int32_t SubscriptionRequest::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_;
}
inline void SubscriptionRequest::_internal_set_instrument_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_ = value;
}

// -------------------------------------------------------------------

// Snapshot

// int32 instrument_id = 1;
inline void Snapshot::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_ = 0;
}
inline ::int32_t Snapshot::instrument_id() const {
  // @@protoc_insertion_point(field_get:marketdata.Snapshot.instrument_id)
  return _internal_instrument_id();
}
inline void Snapshot::set_instrument_id(::int32_t value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:marketdata.Snapshot.instrument_id)
}
inline ::int32_t Snapshot::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_;
}
inline void Snapshot::_internal_set_instrument_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_ = value;
}

// repeated double bids = 2;
inline int Snapshot::_internal_bids_size() const {
  return _internal_bids().size();
}
inline int Snapshot::bids_size() const {
  return _internal_bids_size();
}
inline void Snapshot::clear_bids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bids_.Clear();
}
inline double Snapshot::bids(int index) const {
  // @@protoc_insertion_point(field_get:marketdata.Snapshot.bids)
  return _internal_bids().Get(index);
}
inline void Snapshot::set_bids(int index, double value) {
  _internal_mutable_bids()->Set(index, value);
  // @@protoc_insertion_point(field_set:marketdata.Snapshot.bids)
}
inline void Snapshot::add_bids(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bids()->Add(value);
  // @@protoc_insertion_point(field_add:marketdata.Snapshot.bids)
}
inline const ::google::protobuf::RepeatedField<double>& Snapshot::bids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:marketdata.Snapshot.bids)
  return _internal_bids();
}
inline ::google::protobuf::RepeatedField<double>* Snapshot::mutable_bids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:marketdata.Snapshot.bids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bids();
}
inline const ::google::protobuf::RepeatedField<double>&
Snapshot::_internal_bids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bids_;
}
inline ::google::protobuf::RepeatedField<double>* Snapshot::_internal_mutable_bids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bids_;
}

// repeated double asks = 3;
inline int Snapshot::_internal_asks_size() const {
  return _internal_asks().size();
}
inline int Snapshot::asks_size() const {
  return _internal_asks_size();
}
inline void Snapshot::clear_asks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.asks_.Clear();
}
inline double Snapshot::asks(int index) const {
  // @@protoc_insertion_point(field_get:marketdata.Snapshot.asks)
  return _internal_asks().Get(index);
}
inline void Snapshot::set_asks(int index, double value) {
  _internal_mutable_asks()->Set(index, value);
  // @@protoc_insertion_point(field_set:marketdata.Snapshot.asks)
}
inline void Snapshot::add_asks(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_asks()->Add(value);
  // @@protoc_insertion_point(field_add:marketdata.Snapshot.asks)
}
inline const ::google::protobuf::RepeatedField<double>& Snapshot::asks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:marketdata.Snapshot.asks)
  return _internal_asks();
}
inline ::google::protobuf::RepeatedField<double>* Snapshot::mutable_asks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:marketdata.Snapshot.asks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_asks();
}
inline const ::google::protobuf::RepeatedField<double>&
Snapshot::_internal_asks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.asks_;
}
inline ::google::protobuf::RepeatedField<double>* Snapshot::_internal_mutable_asks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.asks_;
}

// -------------------------------------------------------------------

// IncrementalUpdate

// int32 instrument_id = 1;
inline void IncrementalUpdate::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_ = 0;
}
inline ::int32_t IncrementalUpdate::instrument_id() const {
  // @@protoc_insertion_point(field_get:marketdata.IncrementalUpdate.instrument_id)
  return _internal_instrument_id();
}
inline void IncrementalUpdate::set_instrument_id(::int32_t value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:marketdata.IncrementalUpdate.instrument_id)
}
inline ::int32_t IncrementalUpdate::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_;
}
inline void IncrementalUpdate::_internal_set_instrument_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_ = value;
}

// repeated double bid_changes = 2;
inline int IncrementalUpdate::_internal_bid_changes_size() const {
  return _internal_bid_changes().size();
}
inline int IncrementalUpdate::bid_changes_size() const {
  return _internal_bid_changes_size();
}
inline void IncrementalUpdate::clear_bid_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_changes_.Clear();
}
inline double IncrementalUpdate::bid_changes(int index) const {
  // @@protoc_insertion_point(field_get:marketdata.IncrementalUpdate.bid_changes)
  return _internal_bid_changes().Get(index);
}
inline void IncrementalUpdate::set_bid_changes(int index, double value) {
  _internal_mutable_bid_changes()->Set(index, value);
  // @@protoc_insertion_point(field_set:marketdata.IncrementalUpdate.bid_changes)
}
inline void IncrementalUpdate::add_bid_changes(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bid_changes()->Add(value);
  // @@protoc_insertion_point(field_add:marketdata.IncrementalUpdate.bid_changes)
}
inline const ::google::protobuf::RepeatedField<double>& IncrementalUpdate::bid_changes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:marketdata.IncrementalUpdate.bid_changes)
  return _internal_bid_changes();
}
inline ::google::protobuf::RepeatedField<double>* IncrementalUpdate::mutable_bid_changes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:marketdata.IncrementalUpdate.bid_changes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bid_changes();
}
inline const ::google::protobuf::RepeatedField<double>&
IncrementalUpdate::_internal_bid_changes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bid_changes_;
}
inline ::google::protobuf::RepeatedField<double>* IncrementalUpdate::_internal_mutable_bid_changes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bid_changes_;
}

// repeated double ask_changes = 3;
inline int IncrementalUpdate::_internal_ask_changes_size() const {
  return _internal_ask_changes().size();
}
inline int IncrementalUpdate::ask_changes_size() const {
  return _internal_ask_changes_size();
}
inline void IncrementalUpdate::clear_ask_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_changes_.Clear();
}
inline double IncrementalUpdate::ask_changes(int index) const {
  // @@protoc_insertion_point(field_get:marketdata.IncrementalUpdate.ask_changes)
  return _internal_ask_changes().Get(index);
}
inline void IncrementalUpdate::set_ask_changes(int index, double value) {
  _internal_mutable_ask_changes()->Set(index, value);
  // @@protoc_insertion_point(field_set:marketdata.IncrementalUpdate.ask_changes)
}
inline void IncrementalUpdate::add_ask_changes(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ask_changes()->Add(value);
  // @@protoc_insertion_point(field_add:marketdata.IncrementalUpdate.ask_changes)
}
inline const ::google::protobuf::RepeatedField<double>& IncrementalUpdate::ask_changes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:marketdata.IncrementalUpdate.ask_changes)
  return _internal_ask_changes();
}
inline ::google::protobuf::RepeatedField<double>* IncrementalUpdate::mutable_ask_changes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:marketdata.IncrementalUpdate.ask_changes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ask_changes();
}
inline const ::google::protobuf::RepeatedField<double>&
IncrementalUpdate::_internal_ask_changes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ask_changes_;
}
inline ::google::protobuf::RepeatedField<double>* IncrementalUpdate::_internal_mutable_ask_changes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ask_changes_;
}

// -------------------------------------------------------------------

// MarketDataMessage

// .marketdata.Snapshot snapshot = 1;
inline bool MarketDataMessage::has_snapshot() const {
  return payload_case() == kSnapshot;
}
inline bool MarketDataMessage::_internal_has_snapshot() const {
  return payload_case() == kSnapshot;
}
inline void MarketDataMessage::set_has_snapshot() {
  _impl_._oneof_case_[0] = kSnapshot;
}
inline void MarketDataMessage::clear_snapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSnapshot) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.snapshot_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.snapshot_);
    }
    clear_has_payload();
  }
}
inline ::marketdata::Snapshot* MarketDataMessage::release_snapshot() {
  // @@protoc_insertion_point(field_release:marketdata.MarketDataMessage.snapshot)
  if (payload_case() == kSnapshot) {
    clear_has_payload();
    auto* temp = _impl_.payload_.snapshot_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::marketdata::Snapshot& MarketDataMessage::_internal_snapshot() const {
  return payload_case() == kSnapshot ? *_impl_.payload_.snapshot_ : reinterpret_cast<::marketdata::Snapshot&>(::marketdata::_Snapshot_default_instance_);
}
inline const ::marketdata::Snapshot& MarketDataMessage::snapshot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.MarketDataMessage.snapshot)
  return _internal_snapshot();
}
inline ::marketdata::Snapshot* MarketDataMessage::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:marketdata.MarketDataMessage.snapshot)
  if (payload_case() == kSnapshot) {
    clear_has_payload();
    auto* temp = _impl_.payload_.snapshot_;
    _impl_.payload_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataMessage::unsafe_arena_set_allocated_snapshot(::marketdata::Snapshot* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_snapshot();
    _impl_.payload_.snapshot_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:marketdata.MarketDataMessage.snapshot)
}
inline ::marketdata::Snapshot* MarketDataMessage::_internal_mutable_snapshot() {
  if (payload_case() != kSnapshot) {
    clear_payload();
    set_has_snapshot();
    _impl_.payload_.snapshot_ =
        ::google::protobuf::Message::DefaultConstruct<::marketdata::Snapshot>(GetArena());
  }
  return _impl_.payload_.snapshot_;
}
inline ::marketdata::Snapshot* MarketDataMessage::mutable_snapshot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::marketdata::Snapshot* _msg = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:marketdata.MarketDataMessage.snapshot)
  return _msg;
}

// .marketdata.IncrementalUpdate update = 2;
inline bool MarketDataMessage::has_update() const {
  return payload_case() == kUpdate;
}
inline bool MarketDataMessage::_internal_has_update() const {
  return payload_case() == kUpdate;
}
inline void MarketDataMessage::set_has_update() {
  _impl_._oneof_case_[0] = kUpdate;
}
inline void MarketDataMessage::clear_update() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kUpdate) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.update_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.update_);
    }
    clear_has_payload();
  }
}
inline ::marketdata::IncrementalUpdate* MarketDataMessage::release_update() {
  // @@protoc_insertion_point(field_release:marketdata.MarketDataMessage.update)
  if (payload_case() == kUpdate) {
    clear_has_payload();
    auto* temp = _impl_.payload_.update_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::marketdata::IncrementalUpdate& MarketDataMessage::_internal_update() const {
  return payload_case() == kUpdate ? *_impl_.payload_.update_ : reinterpret_cast<::marketdata::IncrementalUpdate&>(::marketdata::_IncrementalUpdate_default_instance_);
}
inline const ::marketdata::IncrementalUpdate& MarketDataMessage::update() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:marketdata.MarketDataMessage.update)
  return _internal_update();
}
inline ::marketdata::IncrementalUpdate* MarketDataMessage::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:marketdata.MarketDataMessage.update)
  if (payload_case() == kUpdate) {
    clear_has_payload();
    auto* temp = _impl_.payload_.update_;
    _impl_.payload_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataMessage::unsafe_arena_set_allocated_update(::marketdata::IncrementalUpdate* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_update();
    _impl_.payload_.update_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:marketdata.MarketDataMessage.update)
}
inline ::marketdata::IncrementalUpdate* MarketDataMessage::_internal_mutable_update() {
  if (payload_case() != kUpdate) {
    clear_payload();
    set_has_update();
    _impl_.payload_.update_ =
        ::google::protobuf::Message::DefaultConstruct<::marketdata::IncrementalUpdate>(GetArena());
  }
  return _impl_.payload_.update_;
}
inline ::marketdata::IncrementalUpdate* MarketDataMessage::mutable_update() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::marketdata::IncrementalUpdate* _msg = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:marketdata.MarketDataMessage.update)
  return _msg;
}

inline bool MarketDataMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void MarketDataMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline MarketDataMessage::PayloadCase MarketDataMessage::payload_case() const {
  return MarketDataMessage::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace marketdata


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // marketdata_2eproto_2epb_2eh
