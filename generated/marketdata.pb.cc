// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: marketdata.proto
// Protobuf C++ Version: 5.29.3

#include "marketdata.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace marketdata {

inline constexpr SubscriptionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instrument_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SubscriptionRequest::SubscriptionRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SubscriptionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionRequestDefaultTypeInternal() {}
  union {
    SubscriptionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionRequestDefaultTypeInternal _SubscriptionRequest_default_instance_;

inline constexpr Snapshot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bids_{},
        asks_{},
        instrument_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Snapshot::Snapshot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotDefaultTypeInternal() {}
  union {
    Snapshot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotDefaultTypeInternal _Snapshot_default_instance_;

inline constexpr IncrementalUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bid_changes_{},
        ask_changes_{},
        instrument_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IncrementalUpdate::IncrementalUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IncrementalUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncrementalUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncrementalUpdateDefaultTypeInternal() {}
  union {
    IncrementalUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncrementalUpdateDefaultTypeInternal _IncrementalUpdate_default_instance_;

inline constexpr MarketDataMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDataMessage::MarketDataMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDataMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataMessageDefaultTypeInternal() {}
  union {
    MarketDataMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataMessageDefaultTypeInternal _MarketDataMessage_default_instance_;
}  // namespace marketdata
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_marketdata_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_marketdata_2eproto = nullptr;
const ::uint32_t
    TableStruct_marketdata_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::marketdata::SubscriptionRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::marketdata::SubscriptionRequest, _impl_.instrument_id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::marketdata::Snapshot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::marketdata::Snapshot, _impl_.instrument_id_),
        PROTOBUF_FIELD_OFFSET(::marketdata::Snapshot, _impl_.bids_),
        PROTOBUF_FIELD_OFFSET(::marketdata::Snapshot, _impl_.asks_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::marketdata::IncrementalUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::marketdata::IncrementalUpdate, _impl_.instrument_id_),
        PROTOBUF_FIELD_OFFSET(::marketdata::IncrementalUpdate, _impl_.bid_changes_),
        PROTOBUF_FIELD_OFFSET(::marketdata::IncrementalUpdate, _impl_.ask_changes_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::marketdata::MarketDataMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::marketdata::MarketDataMessage, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::marketdata::MarketDataMessage, _impl_.payload_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::marketdata::SubscriptionRequest)},
        {9, -1, -1, sizeof(::marketdata::Snapshot)},
        {20, -1, -1, sizeof(::marketdata::IncrementalUpdate)},
        {31, -1, -1, sizeof(::marketdata::MarketDataMessage)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::marketdata::_SubscriptionRequest_default_instance_._instance,
    &::marketdata::_Snapshot_default_instance_._instance,
    &::marketdata::_IncrementalUpdate_default_instance_._instance,
    &::marketdata::_MarketDataMessage_default_instance_._instance,
};
const char descriptor_table_protodef_marketdata_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020marketdata.proto\022\nmarketdata\",\n\023Subscr"
    "iptionRequest\022\025\n\rinstrument_id\030\001 \001(\005\"=\n\010"
    "Snapshot\022\025\n\rinstrument_id\030\001 \001(\005\022\014\n\004bids\030"
    "\002 \003(\001\022\014\n\004asks\030\003 \003(\001\"T\n\021IncrementalUpdate"
    "\022\025\n\rinstrument_id\030\001 \001(\005\022\023\n\013bid_changes\030\002"
    " \003(\001\022\023\n\013ask_changes\030\003 \003(\001\"y\n\021MarketDataM"
    "essage\022(\n\010snapshot\030\001 \001(\0132\024.marketdata.Sn"
    "apshotH\000\022/\n\006update\030\002 \001(\0132\035.marketdata.In"
    "crementalUpdateH\000B\t\n\007payload2d\n\021MarketDa"
    "taService\022O\n\tSubscribe\022\037.marketdata.Subs"
    "criptionRequest\032\035.marketdata.MarketDataM"
    "essage(\0010\001b\006proto3"
};
static ::absl::once_flag descriptor_table_marketdata_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_marketdata_2eproto = {
    false,
    false,
    458,
    descriptor_table_protodef_marketdata_2eproto,
    "marketdata.proto",
    &descriptor_table_marketdata_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_marketdata_2eproto::offsets,
    file_level_enum_descriptors_marketdata_2eproto,
    file_level_service_descriptors_marketdata_2eproto,
};
namespace marketdata {
// ===================================================================

class SubscriptionRequest::_Internal {
 public:
};

SubscriptionRequest::SubscriptionRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:marketdata.SubscriptionRequest)
}
SubscriptionRequest::SubscriptionRequest(
    ::google::protobuf::Arena* arena, const SubscriptionRequest& from)
    : SubscriptionRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SubscriptionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SubscriptionRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_id_ = {};
}
SubscriptionRequest::~SubscriptionRequest() {
  // @@protoc_insertion_point(destructor:marketdata.SubscriptionRequest)
  SharedDtor(*this);
}
inline void SubscriptionRequest::SharedDtor(MessageLite& self) {
  SubscriptionRequest& this_ = static_cast<SubscriptionRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SubscriptionRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SubscriptionRequest(arena);
}
constexpr auto SubscriptionRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubscriptionRequest),
                                            alignof(SubscriptionRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SubscriptionRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SubscriptionRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SubscriptionRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SubscriptionRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SubscriptionRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SubscriptionRequest>(), &SubscriptionRequest::ByteSizeLong,
            &SubscriptionRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SubscriptionRequest, _impl_._cached_size_),
        false,
    },
    &SubscriptionRequest::kDescriptorMethods,
    &descriptor_table_marketdata_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SubscriptionRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SubscriptionRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::marketdata::SubscriptionRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 instrument_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubscriptionRequest, _impl_.instrument_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SubscriptionRequest, _impl_.instrument_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 instrument_id = 1;
    {PROTOBUF_FIELD_OFFSET(SubscriptionRequest, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:marketdata.SubscriptionRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SubscriptionRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SubscriptionRequest& this_ = static_cast<const SubscriptionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SubscriptionRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SubscriptionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:marketdata.SubscriptionRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 instrument_id = 1;
          if (this_._internal_instrument_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_instrument_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:marketdata.SubscriptionRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SubscriptionRequest::ByteSizeLong(const MessageLite& base) {
          const SubscriptionRequest& this_ = static_cast<const SubscriptionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SubscriptionRequest::ByteSizeLong() const {
          const SubscriptionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:marketdata.SubscriptionRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // int32 instrument_id = 1;
            if (this_._internal_instrument_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_instrument_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SubscriptionRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SubscriptionRequest*>(&to_msg);
  auto& from = static_cast<const SubscriptionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:marketdata.SubscriptionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_instrument_id() != 0) {
    _this->_impl_.instrument_id_ = from._impl_.instrument_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionRequest::CopyFrom(const SubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:marketdata.SubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SubscriptionRequest::InternalSwap(SubscriptionRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.instrument_id_, other->_impl_.instrument_id_);
}

::google::protobuf::Metadata SubscriptionRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Snapshot::_Internal {
 public:
};

Snapshot::Snapshot(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:marketdata.Snapshot)
}
inline PROTOBUF_NDEBUG_INLINE Snapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::marketdata::Snapshot& from_msg)
      : bids_{visibility, arena, from.bids_},
        asks_{visibility, arena, from.asks_},
        _cached_size_{0} {}

Snapshot::Snapshot(
    ::google::protobuf::Arena* arena,
    const Snapshot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Snapshot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.instrument_id_ = from._impl_.instrument_id_;

  // @@protoc_insertion_point(copy_constructor:marketdata.Snapshot)
}
inline PROTOBUF_NDEBUG_INLINE Snapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : bids_{visibility, arena},
        asks_{visibility, arena},
        _cached_size_{0} {}

inline void Snapshot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_id_ = {};
}
Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:marketdata.Snapshot)
  SharedDtor(*this);
}
inline void Snapshot::SharedDtor(MessageLite& self) {
  Snapshot& this_ = static_cast<Snapshot&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Snapshot::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Snapshot(arena);
}
constexpr auto Snapshot::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.bids_) +
          decltype(Snapshot::_impl_.bids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.asks_) +
          decltype(Snapshot::_impl_.asks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Snapshot), alignof(Snapshot), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Snapshot::PlacementNew_,
                                 sizeof(Snapshot),
                                 alignof(Snapshot));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Snapshot::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Snapshot_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Snapshot::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Snapshot>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Snapshot::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Snapshot>(), &Snapshot::ByteSizeLong,
            &Snapshot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Snapshot, _impl_._cached_size_),
        false,
    },
    &Snapshot::kDescriptorMethods,
    &descriptor_table_marketdata_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Snapshot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Snapshot::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::marketdata::Snapshot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 instrument_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Snapshot, _impl_.instrument_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.instrument_id_)}},
    // repeated double bids = 2;
    {::_pbi::TcParser::FastF64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.bids_)}},
    // repeated double asks = 3;
    {::_pbi::TcParser::FastF64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.asks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 instrument_id = 1;
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated double bids = 2;
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.bids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double asks = 3;
    {PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.asks_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:marketdata.Snapshot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bids_.Clear();
  _impl_.asks_.Clear();
  _impl_.instrument_id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Snapshot::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Snapshot& this_ = static_cast<const Snapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Snapshot::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Snapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:marketdata.Snapshot)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 instrument_id = 1;
          if (this_._internal_instrument_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_instrument_id(), target);
          }

          // repeated double bids = 2;
          if (this_._internal_bids_size() > 0) {
            target = stream->WriteFixedPacked(2, this_._internal_bids(), target);
          }

          // repeated double asks = 3;
          if (this_._internal_asks_size() > 0) {
            target = stream->WriteFixedPacked(3, this_._internal_asks(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:marketdata.Snapshot)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Snapshot::ByteSizeLong(const MessageLite& base) {
          const Snapshot& this_ = static_cast<const Snapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Snapshot::ByteSizeLong() const {
          const Snapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:marketdata.Snapshot)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double bids = 2;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_bids_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double asks = 3;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_asks_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // int32 instrument_id = 1;
            if (this_._internal_instrument_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_instrument_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Snapshot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Snapshot*>(&to_msg);
  auto& from = static_cast<const Snapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:marketdata.Snapshot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bids()->MergeFrom(from._internal_bids());
  _this->_internal_mutable_asks()->MergeFrom(from._internal_asks());
  if (from._internal_instrument_id() != 0) {
    _this->_impl_.instrument_id_ = from._impl_.instrument_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:marketdata.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Snapshot::InternalSwap(Snapshot* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
  _impl_.asks_.InternalSwap(&other->_impl_.asks_);
        swap(_impl_.instrument_id_, other->_impl_.instrument_id_);
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IncrementalUpdate::_Internal {
 public:
};

IncrementalUpdate::IncrementalUpdate(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:marketdata.IncrementalUpdate)
}
inline PROTOBUF_NDEBUG_INLINE IncrementalUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::marketdata::IncrementalUpdate& from_msg)
      : bid_changes_{visibility, arena, from.bid_changes_},
        ask_changes_{visibility, arena, from.ask_changes_},
        _cached_size_{0} {}

IncrementalUpdate::IncrementalUpdate(
    ::google::protobuf::Arena* arena,
    const IncrementalUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IncrementalUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.instrument_id_ = from._impl_.instrument_id_;

  // @@protoc_insertion_point(copy_constructor:marketdata.IncrementalUpdate)
}
inline PROTOBUF_NDEBUG_INLINE IncrementalUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : bid_changes_{visibility, arena},
        ask_changes_{visibility, arena},
        _cached_size_{0} {}

inline void IncrementalUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_id_ = {};
}
IncrementalUpdate::~IncrementalUpdate() {
  // @@protoc_insertion_point(destructor:marketdata.IncrementalUpdate)
  SharedDtor(*this);
}
inline void IncrementalUpdate::SharedDtor(MessageLite& self) {
  IncrementalUpdate& this_ = static_cast<IncrementalUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* IncrementalUpdate::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IncrementalUpdate(arena);
}
constexpr auto IncrementalUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(IncrementalUpdate, _impl_.bid_changes_) +
          decltype(IncrementalUpdate::_impl_.bid_changes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(IncrementalUpdate, _impl_.ask_changes_) +
          decltype(IncrementalUpdate::_impl_.ask_changes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(IncrementalUpdate), alignof(IncrementalUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&IncrementalUpdate::PlacementNew_,
                                 sizeof(IncrementalUpdate),
                                 alignof(IncrementalUpdate));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull IncrementalUpdate::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_IncrementalUpdate_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IncrementalUpdate::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<IncrementalUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IncrementalUpdate::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<IncrementalUpdate>(), &IncrementalUpdate::ByteSizeLong,
            &IncrementalUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IncrementalUpdate, _impl_._cached_size_),
        false,
    },
    &IncrementalUpdate::kDescriptorMethods,
    &descriptor_table_marketdata_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* IncrementalUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> IncrementalUpdate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::marketdata::IncrementalUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 instrument_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IncrementalUpdate, _impl_.instrument_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IncrementalUpdate, _impl_.instrument_id_)}},
    // repeated double bid_changes = 2;
    {::_pbi::TcParser::FastF64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(IncrementalUpdate, _impl_.bid_changes_)}},
    // repeated double ask_changes = 3;
    {::_pbi::TcParser::FastF64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(IncrementalUpdate, _impl_.ask_changes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 instrument_id = 1;
    {PROTOBUF_FIELD_OFFSET(IncrementalUpdate, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated double bid_changes = 2;
    {PROTOBUF_FIELD_OFFSET(IncrementalUpdate, _impl_.bid_changes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated double ask_changes = 3;
    {PROTOBUF_FIELD_OFFSET(IncrementalUpdate, _impl_.ask_changes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void IncrementalUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:marketdata.IncrementalUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bid_changes_.Clear();
  _impl_.ask_changes_.Clear();
  _impl_.instrument_id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IncrementalUpdate::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IncrementalUpdate& this_ = static_cast<const IncrementalUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IncrementalUpdate::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IncrementalUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:marketdata.IncrementalUpdate)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 instrument_id = 1;
          if (this_._internal_instrument_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_instrument_id(), target);
          }

          // repeated double bid_changes = 2;
          if (this_._internal_bid_changes_size() > 0) {
            target = stream->WriteFixedPacked(2, this_._internal_bid_changes(), target);
          }

          // repeated double ask_changes = 3;
          if (this_._internal_ask_changes_size() > 0) {
            target = stream->WriteFixedPacked(3, this_._internal_ask_changes(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:marketdata.IncrementalUpdate)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IncrementalUpdate::ByteSizeLong(const MessageLite& base) {
          const IncrementalUpdate& this_ = static_cast<const IncrementalUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IncrementalUpdate::ByteSizeLong() const {
          const IncrementalUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:marketdata.IncrementalUpdate)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated double bid_changes = 2;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_bid_changes_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double ask_changes = 3;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_ask_changes_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
           {
            // int32 instrument_id = 1;
            if (this_._internal_instrument_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_instrument_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void IncrementalUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IncrementalUpdate*>(&to_msg);
  auto& from = static_cast<const IncrementalUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:marketdata.IncrementalUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bid_changes()->MergeFrom(from._internal_bid_changes());
  _this->_internal_mutable_ask_changes()->MergeFrom(from._internal_ask_changes());
  if (from._internal_instrument_id() != 0) {
    _this->_impl_.instrument_id_ = from._impl_.instrument_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IncrementalUpdate::CopyFrom(const IncrementalUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:marketdata.IncrementalUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IncrementalUpdate::InternalSwap(IncrementalUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bid_changes_.InternalSwap(&other->_impl_.bid_changes_);
  _impl_.ask_changes_.InternalSwap(&other->_impl_.ask_changes_);
        swap(_impl_.instrument_id_, other->_impl_.instrument_id_);
}

::google::protobuf::Metadata IncrementalUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketDataMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::marketdata::MarketDataMessage, _impl_._oneof_case_);
};

void MarketDataMessage::set_allocated_snapshot(::marketdata::Snapshot* snapshot) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (snapshot) {
    ::google::protobuf::Arena* submessage_arena = snapshot->GetArena();
    if (message_arena != submessage_arena) {
      snapshot = ::google::protobuf::internal::GetOwnedMessage(message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    _impl_.payload_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:marketdata.MarketDataMessage.snapshot)
}
void MarketDataMessage::set_allocated_update(::marketdata::IncrementalUpdate* update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (update) {
    ::google::protobuf::Arena* submessage_arena = update->GetArena();
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(message_arena, update, submessage_arena);
    }
    set_has_update();
    _impl_.payload_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:marketdata.MarketDataMessage.update)
}
MarketDataMessage::MarketDataMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:marketdata.MarketDataMessage)
}
inline PROTOBUF_NDEBUG_INLINE MarketDataMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::marketdata::MarketDataMessage& from_msg)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

MarketDataMessage::MarketDataMessage(
    ::google::protobuf::Arena* arena,
    const MarketDataMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketDataMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kSnapshot:
        _impl_.payload_.snapshot_ = ::google::protobuf::Message::CopyConstruct<::marketdata::Snapshot>(arena, *from._impl_.payload_.snapshot_);
        break;
      case kUpdate:
        _impl_.payload_.update_ = ::google::protobuf::Message::CopyConstruct<::marketdata::IncrementalUpdate>(arena, *from._impl_.payload_.update_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:marketdata.MarketDataMessage)
}
inline PROTOBUF_NDEBUG_INLINE MarketDataMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void MarketDataMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MarketDataMessage::~MarketDataMessage() {
  // @@protoc_insertion_point(destructor:marketdata.MarketDataMessage)
  SharedDtor(*this);
}
inline void MarketDataMessage::SharedDtor(MessageLite& self) {
  MarketDataMessage& this_ = static_cast<MarketDataMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_payload()) {
    this_.clear_payload();
  }
  this_._impl_.~Impl_();
}

void MarketDataMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:marketdata.MarketDataMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (payload_case()) {
    case kSnapshot: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.snapshot_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.snapshot_);
      }
      break;
    }
    case kUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.update_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.update_);
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


inline void* MarketDataMessage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketDataMessage(arena);
}
constexpr auto MarketDataMessage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MarketDataMessage),
                                            alignof(MarketDataMessage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketDataMessage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketDataMessage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketDataMessage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketDataMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketDataMessage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketDataMessage>(), &MarketDataMessage::ByteSizeLong,
            &MarketDataMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketDataMessage, _impl_._cached_size_),
        false,
    },
    &MarketDataMessage::kDescriptorMethods,
    &descriptor_table_marketdata_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketDataMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> MarketDataMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::marketdata::MarketDataMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .marketdata.Snapshot snapshot = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDataMessage, _impl_.payload_.snapshot_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .marketdata.IncrementalUpdate update = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDataMessage, _impl_.payload_.update_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::marketdata::Snapshot>()},
    {::_pbi::TcParser::GetTable<::marketdata::IncrementalUpdate>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MarketDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:marketdata.MarketDataMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketDataMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketDataMessage& this_ = static_cast<const MarketDataMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketDataMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketDataMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:marketdata.MarketDataMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.payload_case()) {
            case kSnapshot: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.payload_.snapshot_, this_._impl_.payload_.snapshot_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUpdate: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.payload_.update_, this_._impl_.payload_.update_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:marketdata.MarketDataMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketDataMessage::ByteSizeLong(const MessageLite& base) {
          const MarketDataMessage& this_ = static_cast<const MarketDataMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketDataMessage::ByteSizeLong() const {
          const MarketDataMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:marketdata.MarketDataMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.payload_case()) {
            // .marketdata.Snapshot snapshot = 1;
            case kSnapshot: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.snapshot_);
              break;
            }
            // .marketdata.IncrementalUpdate update = 2;
            case kUpdate: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.update_);
              break;
            }
            case PAYLOAD_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketDataMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketDataMessage*>(&to_msg);
  auto& from = static_cast<const MarketDataMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:marketdata.MarketDataMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSnapshot: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.snapshot_ =
              ::google::protobuf::Message::CopyConstruct<::marketdata::Snapshot>(arena, *from._impl_.payload_.snapshot_);
        } else {
          _this->_impl_.payload_.snapshot_->MergeFrom(from._internal_snapshot());
        }
        break;
      }
      case kUpdate: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.update_ =
              ::google::protobuf::Message::CopyConstruct<::marketdata::IncrementalUpdate>(arena, *from._impl_.payload_.update_);
        } else {
          _this->_impl_.payload_.update_->MergeFrom(from._internal_update());
        }
        break;
      }
      case PAYLOAD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDataMessage::CopyFrom(const MarketDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:marketdata.MarketDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketDataMessage::InternalSwap(MarketDataMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata MarketDataMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace marketdata
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_marketdata_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
